image: docker:latest

variables:
  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest

services:
  - name: docker:dind

stages:
  - build
  - deploy

# Docker image builds
#
# Build the Docker images  specificd in DOCKERFILE_FOLDER/IMAGE_NAME and push
# it to Gitlab's internal Docker registry
.docker-build:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Try to download latest image for cache, but don't fail if it does not exist
    # Download tag for ostree-builder stage first.
    - docker build -f ${DOCKERFILE_NAME} --target ostree-builder --build-arg BUILDKIT_INLINE_CACHE=1
                     --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:ostree-builder-latest
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:ostree-builder-latest
                     .
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:ostree-builder-latest
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker build -f ${DOCKERFILE_NAME} --build-arg BUILDKIT_INLINE_CACHE=1
                     --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:ostree-builder-latest
                     --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
                     -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
                     .
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
  stage: build

pylint:
  allow_failure: true
  # Image built using --target tcbuilder-dev -f torizoncore-builder.Dockerfile
  image: gitlab.int.toradex.com:4567/rd/torizon-core-containers/torizoncore-builder/tcbuilder-dev:latest
  script:
    # Run without C(onvention)/R(efactoring) levels, use this run as exit code
    - pylint --output-format=colorized --disable=C,R $(find -type f -name "*.py") || exit_code=$?
    - pylint --output-format=colorized --disable=W,E,F $(find -type f -name "*.py")
    - exit ${exit_code}
  stage: build

docker-build-torizoncore-builder:
  extends: .docker-build
  variables:
    IMAGE_NAME: torizoncore-builder
    DOCKERFILE_NAME: torizoncore-builder.Dockerfile

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_PW is properly set in the project
# specific Gitlab CI settings.
.docker-deploy:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  when: manual
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_TAG} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:latest
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
    - docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:latest
  stage: deploy

docker-deploy-torizoncore-builder:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: torizoncore-builder
